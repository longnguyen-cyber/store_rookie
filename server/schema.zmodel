
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../libs/common/src/@generated"
  combineScalarFilters = true
  noAtomicOperations   = true
}

model User {
  id        String    @id() @default(cuid()) @map("user_id")
  username  String
  password  String
  email     String    @unique()
  isAdmin   Boolean   @default(false) @map("is_admin")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  orders    Order[]
  reviews   Review[]
  Cart      Cart[]

  @@map("users")
}

model Category {
  id        String    @id() @default(cuid()) @map("category_id")
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  books     Book[]

  @@map("categories")
}

model Author {
  id        String       @id() @default(cuid()) @map("author_id")
  name      String
  bio       String?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")
  books     BookAuthor[]

  @@map("authors")
}

model Publisher {
  id        String          @id() @default(cuid()) @map("publisher_id")
  name      String
  address   String?         @map("address")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")
  deletedAt DateTime?       @map("deleted_at")
  books     BookPublisher[]

  @@map("publishers")
}

model Book {
  id          String          @id() @default(cuid()) @map("book_id")
  title       String
  description String?         @map("description")
  categoryId  String          @map("category_id")
  rating      Float           @default(0) @map("rating")
  ratings     Json            @map("ratings")
  images      Json            @map("images")
  quantity    Int             @default(100)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  category    Category        @relation(fields: [categoryId], references: [id])
  prices      BookPrice[]
  authors     BookAuthor[]
  publishers  BookPublisher[]
  promotions  Promotion[]
  reviews     Review[]
  orderItems  OrderItem[]
  CartItem    CartItem[]

  @@map("books")
}

model BookPrice {
  id            String    @id() @default(cuid()) @map("price_id")
  bookId        String    @map("book_id")
  originalPrice Float     @map("original_price")
  discountPrice Float     @map("discount_price")
  startDate     DateTime  @map("start_date")
  endDate       DateTime? @map("end_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  book          Book      @relation(fields: [bookId], references: [id])

  @@map("book_prices")
}

model OrderItem {
  id        String    @id() @default(cuid()) @map("order_item_id")
  orderId   String    @map("order_id")
  bookId    String    @map("book_id")
  quantity  Int       @map("quantity")
  priceId   String    @map("price_id")
  order     Order     @relation(fields: [orderId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("order_items")
}

model BookAuthor {
  bookId    String    @map("book_id")
  authorId  String    @map("author_id")
  book      Book      @relation(fields: [bookId], references: [id])
  author    Author    @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([bookId, authorId])
  @@map("book_authors")
}

model BookPublisher {
  bookId      String    @map("book_id")
  publisherId String    @map("publisher_id")
  book        Book      @relation(fields: [bookId], references: [id])
  publisher   Publisher @relation(fields: [publisherId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  @@id([bookId, publisherId])
  @@map("book_publishers")
}

model Promotion {
  id            String    @id() @default(cuid()) @map("promotion_id")
  bookId        String    @map("book_id")
  promotionType String    @map("promotion_type")
  startDate     DateTime? @map("start_date")
  endDate       DateTime? @map("end_date")
  book          Book      @relation(fields: [bookId], references: [id])
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  @@map("promotions")
}

model Review {
  id        String    @id() @default(cuid()) @map("review_id")
  bookId    String    @map("book_id")
  userId    String    @map("user_id")
  rating    Int       @map("rating")
  title     String    @map("title")
  status    Boolean   @default(true) @map("status")
  content   String?   @map("content")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  book      Book      @relation(fields: [bookId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Order {
  id        String      @id() @default(cuid()) @map("order_id")
  userId    String      @map("user_id")
  orderDate DateTime    @default(now()) @map("order_date")
  status    String      @default("Pending") @map("status")
  payment   String      @map("payment") @default("cash")
  isPayment Boolean     @default(false) @map("is_payment")
  address   String      @map("address")
  shipping  Float       @map("shipping")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model Cart {
  id        String     @id() @default(cuid()) @map("cart_id")
  userId    String?    @map("user_id")
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  guestId   String?    @map("guest_id")

  @@map("carts")
}

model CartItem {
  id        String    @id() @default(cuid()) @map("cart_item_id")
  cartId    String    @map("cart_id")
  bookId    String    @map("book_id")
  quantity  Int       @map("quantity")
  priceId   String    @map("price_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  cart      Cart      @relation(fields: [cartId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])

  @@map("cart_items")
}


model StaticPage {
  id        String    @id() @default(cuid()) @map("static_page_id")
  content   String    @map("content")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("static_pages")
}