//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../libs/common/src/@generated"
  combineScalarFilters = true
  noAtomicOperations   = true
}

model User {
  id        String   @id() @default(cuid()) @map("user_id")
  username  String   @unique()
  password  String
  email     String   @unique()
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id    String @id() @default(cuid()) @map("category_id")
  name  String
  books Book[]

  @@map("categories")
}

model Author {
  id    String       @id() @default(cuid()) @map("author_id")
  name  String
  bio   String?
  books BookAuthor[]

  @@map("authors")
}

model Publisher {
  id      String          @id() @default(cuid()) @map("publisher_id")
  name    String
  address String?         @map("address")
  books   BookPublisher[]

  @@map("publishers")
}

model Book {
  id          String          @id() @default(cuid()) @map("book_id")
  title       String
  description String?         @map("description")
  categoryId  String          @map("category_id")
  genre       String          @map("genre")
  rating      Float           @default(0) @map("rating")
  images      Json            @map("images")
  createdAt   DateTime        @default(now()) @map("created_at")
  category    Category        @relation(fields: [categoryId], references: [id])
  prices      BookPrice[]
  authors     BookAuthor[]
  publishers  BookPublisher[]
  promotions  Promotion[]
  reviews     Review[]
  orderItems  OrderItem[]

  @@map("books")
}

model BookPrice {
  id            String    @id() @default(cuid()) @map("price_id")
  bookId        String    @map("book_id")
  originalPrice Float     @map("original_price")
  discountPrice Float     @map("discount_price")
  startDate     DateTime  @map("start_date")
  endDate       DateTime? @map("end_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  book          Book      @relation(fields: [bookId], references: [id])

  @@map("book_prices")
}

model OrderItem {
  id       String @id() @default(cuid()) @map("order_item_id")
  orderId  String @map("order_id")
  bookId   String @map("book_id")
  quantity Int    @map("quantity")
  priceId  String @map("price_id")
  order    Order  @relation(fields: [orderId], references: [id])
  book     Book   @relation(fields: [bookId], references: [id])

  @@map("order_items")
}

model BookAuthor {
  bookId   String @map("book_id")
  authorId String @map("author_id")
  book     Book   @relation(fields: [bookId], references: [id])
  author   Author @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
  @@map("book_authors")
}

model BookPublisher {
  bookId      String    @map("book_id")
  publisherId String    @map("publisher_id")
  book        Book      @relation(fields: [bookId], references: [id])
  publisher   Publisher @relation(fields: [publisherId], references: [id])

  @@id([bookId, publisherId])
  @@map("book_publishers")
}

model Promotion {
  id            String    @id() @default(cuid()) @map("promotion_id")
  bookId        String    @map("book_id")
  promotionType String    @map("promotion_type")
  startDate     DateTime? @map("start_date")
  endDate       DateTime? @map("end_date")
  book          Book      @relation(fields: [bookId], references: [id])

  @@map("promotions")
}

model Review {
  id        String   @id() @default(cuid()) @map("review_id")
  bookId    String   @map("book_id")
  userId    String   @map("user_id")
  rating    Int      @map("rating")
  comment   String?  @map("comment")
  createdAt DateTime @default(now()) @map("created_at")
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Order {
  id        String      @id() @default(cuid()) @map("order_id")
  userId    String      @map("user_id")
  orderDate DateTime    @default(now()) @map("order_date")
  status    String      @default("Pending") @map("status")
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}
