//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../apps/api-gateway/src/graphql/@generated"
  combineScalarFilters = true
  noAtomicOperations   = true
}

model User {
  id        String   @id() @default(cuid()) @map("user_id")
  username  String   @unique()
  password  String
  email     String   @unique()
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id    String @id() @default(cuid()) @map("category_id")
  name  String
  books Book[]

  @@map("categories")
}

model Author {
  id    String       @id() @default(cuid()) @map("author_id")
  name  String
  bio   String?
  books BookAuthor[]

  @@map("authors")
}

model Publisher {
  id      String          @id() @default(cuid()) @map("publisher_id")
  name    String
  address String?
  books   BookPublisher[]

  @@map("publishers")
}

model Book {
  id          String          @id() @default(cuid()) @map("book_id")
  title       String
  description String?
  categoryId  String
  images      Json
  createdAt   DateTime        @default(now())
  category    Category        @relation(fields: [categoryId], references: [id])
  prices      BookPrice[]
  authors     BookAuthor[]
  publishers  BookPublisher[]
  promotions  Promotion[]
  reviews     Review[]
  orderItems  OrderItem[]

  @@map("books")
}

model BookPrice {
  id        String      @id() @default(cuid()) @map("price_id")
  bookId    String
  price     Float
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime    @default(now())
  book      Book        @relation(fields: [bookId], references: [id])
  OrderItem OrderItem[]

  @@map("book_prices")
}

model BookAuthor {
  bookId   String
  authorId String
  book     Book   @relation(fields: [bookId], references: [id])
  author   Author @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
  @@map("book_authors")
}

model BookPublisher {
  bookId      String
  publisherId String
  book        Book      @relation(fields: [bookId], references: [id])
  publisher   Publisher @relation(fields: [publisherId], references: [id])

  @@id([bookId, publisherId])
  @@map("book_publishers")
}

model Promotion {
  id            String    @id() @default(cuid()) @map("promotion_id")
  bookId        String
  promotionType String
  startDate     DateTime?
  endDate       DateTime?
  book          Book      @relation(fields: [bookId], references: [id])

  @@map("promotions")
}

model Review {
  id        String   @id() @default(cuid()) @map("review_id")
  bookId    String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Order {
  id        String      @id() @default(cuid()) @map("order_id")
  userId    String
  orderDate DateTime    @default(now())
  status    String      @default("Pending")
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String    @id() @default(cuid()) @map("order_item_id")
  orderId  String
  bookId   String
  quantity String
  priceId  String
  order    Order     @relation(fields: [orderId], references: [id])
  book     Book      @relation(fields: [bookId], references: [id])
  price    BookPrice @relation(fields: [priceId], references: [id])

  @@map("order_items")
}
